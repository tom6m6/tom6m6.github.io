<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown指南1</title>
    <url>/2018/02/25/markdown1/</url>
    <content><![CDATA[<p>本文章包含一些简单的markdown语法</p>
<blockquote>
<p>Markdown是一种轻量级标记语言</p>
<p>它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。</p>
</blockquote>
<p>Markdown是优秀的，值得我们学习一下。那么，如何使用Markdown呢？</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在标题内容前输入特定数量的井号#来实现对应级别的标题（提供六级标题）。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure>



<p>显示效果</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>注意：井号#后一定要有空格；标题级数越大越小</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在文字前面加上<code>-</code>就可以了,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 文本1</span><br><span class="line">- 文本2</span><br><span class="line">- 文本3</span><br></pre></td></tr></table></figure>



<ul>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ul>
<p>也可以在文字前面加上 <code>1. 2. 3.</code> 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 文本1</span><br><span class="line">2. 文本2</span><br><span class="line">3. 文本3</span><br></pre></td></tr></table></figure>



<ol>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ol>
<h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p>插入链接不需要其他按钮，你只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：<br><code>[Google](https://google.com)</code></p>
<p><a href="https://google.com/">Google</a></p>
<p>插入图片只需要使用 <code>![](图片链接地址) 这样的语法即可，例如：</code> 例如：<br><code>![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code></p>
<p><a href="http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><img src="http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></a></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：<br><code>&gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</code></p>
<blockquote>
<p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p>
</blockquote>
<h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>用两个 <em>包含一段文本就是粗体的语法，用一个</em> 包含一段文本就是斜体的语法。例如：<br><code>*一盏灯*， 一片昏黄；**一简书**， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</code></p>
<p><em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p>
<h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。<br>如果引用的语句为多行，可以将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](https://raw.githubusercontent.com/tg6169/tg6169.github.io/master/259-dcf737a97e71cd73.jpg)</span><br><span class="line"></span><br><span class="line">## See Also</span><br><span class="line">###  显示链接中带括号的图片</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![][1]</span><br><span class="line">[1]: http://latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1</span><br></pre></td></tr></table></figure>

<p>```</p>
<p>![][1]<br>[1]: [<a href="http://latex.codecogs.com/gif.latex?%5Cprod%20%5C(n_%7Bi%7D%5C)+1%5D">http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1]</a>(<a href="http://latex.codecogs.com/gif.latex?%5Cprod">http://latex.codecogs.com/gif.latex?\prod</a> (n_{i})+1)</p>
<p>空格+空格+回车换行</p>
]]></content>
      <tags>
        <tag>skills</tag>
      </tags>
  </entry>
  <entry>
    <title>hello_world</title>
    <url>/2022/05/19/hello-world/</url>
    <content><![CDATA[<p>Hello World<br>2018年2月4日，我创建的博客上如是说…<br>Blog<br>博客（Blog）是一种由个人管理、张贴新的文章、图片或视频的网站或在线日记，用来纪录、抒发情感或分享信息。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。</p>
<p>博客，显然已经成为了新时代的“老古董”。繁琐的操作注定与这个时代脱轨。但是，对于知识的传播，信息交流和思想表达，这显然是一个完美的平台。</p>
<p>Aim<br>本博客旨在让有效信息更快传播，让交流更为容易。</p>
<p>Principle<br>简洁是核心思想。这可以使我们更高效地交流，也可以使行动更容易</p>
<p>Content<br>本博客以技术内容为主，但会涉及政治，历史及其他领域。</p>
<p>Other<br>1.鉴于博主是一名学生，学业负担大，可能长期不维护博客;</p>
<p>2.发表的内容如果涉及看法，纯属个人见解，如有冒犯，请勿介意。</p>
]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>创建github+hexo个人博客</title>
    <url>/2022/05/19/blogsetup220518/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>无疑，使用博客是记录一个程序员成长的有效方式。在技术之外，自己也想通过个人的主页发布一些好的文章。国内的网络审查是越来越严了，网络的实名制使我们没有很多渠道畅所欲言，甚至不敢大声地把自己的想法说出来。<br>为了让自己安心地好好记录，冷静地记录自己一路以来的成长，我又重新拾起了2018年便已玩过的github+hexo。这是一个低成本低投入创立个人主页的方式，今天我就来记录一下中间的过程。</p>
<h2 id="预先安装"><a href="#预先安装" class="headerlink" title="预先安装"></a>预先安装</h2><h3 id="git-amp-github"><a href="#git-amp-github" class="headerlink" title="git&amp;github"></a>git&amp;github</h3><blockquote>
<p>git是一个分布式的版本控制软件<br>github是通过Git进行版本控制的源代码托管平台<br><a href="https://git-scm.com/downloads">git官网下载</a><br>安装一路next就行，安装之后通过以下代码配置git用户名和邮箱</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;yourmailaddress&quot;</span><br></pre></td></tr></table></figure>
<p>github账号注册略<br>注册好之后新建一个仓库，然后名称就是  用户名.github.io此处我添加了readme文档<br>建成之后在仓库的设置中找到github pages<br>为了不用每次同步都要验证，直接一劳永逸的设置公私钥，使我们的计算机就被认为是本人的<br>生成ssh密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourmailaddress&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后三个回车，因为默认不再需要密码<br>然后进入C盘user\用户名.ssh文件夹 打开其中的id_rsa.pub文件<br>复制粘贴到gihub_setteing_keys中的new ssh key中<br>检验上述成功的方法 git bash输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<p>出现 Hi tom6m6! You’ve successfully authenticated, but GitHub does not provide shell access.表示成功</p>
<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>node.js是能够在服务器端运行javascript的开源跨平台执行环境<br><a href="https://nodejs.org/zh-cn/download/">nodejs官方下载</a><br>安装还是一路next 中间有个过程可能会选择是否 ADD TO PATH 这个就是在看是否要添加环境变量，此处一定要选<br>安装成功之后cmd中输入 node -v和 npm-v都正常<br>之后建议别乱改默认的环境变量设置，否则之后会出很多问题，本人就在这被坑了呜呜呜</p>
<h2 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo就是我们需要的博客框架</span><br><span class="line">先建立一个自己博客文件夹，然后在此开git bash</span><br><span class="line">npm install -g hexo-cli 安装</span><br><span class="line">之后输入hexo -v看看是否成功安装</span><br><span class="line">hexo init blog 初始化到blog文件夹</span><br><span class="line">然后进入blog文件夹</span><br><span class="line">hexo new test</span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br><span class="line">之后在本地的 localhost:4000可以加载预览</span><br></pre></td></tr></table></figure>
<h3 id="部署与流程"><a href="#部署与流程" class="headerlink" title="部署与流程"></a>部署与流程</h3><p>有两个_config.yml 一个在最外层blog的目录下，一个在themes文件夹中<br>前者是站点配置，后者是主题配置<br>关联hexo与github<br>进入站点配置<br>找到deploy:以下改为(以本人为例)<br>deploy:<br>type: git<br>repo: <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>:tom6m6/tom6m6.github.io<br>branch: master<br>注意此处repo后一定是 <a href="mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a>:tom6m6/tom6m6.github.io<br>而不是某些博客写的<a href="https://github.com/tom6m6/tom6m6.github.io.git">https://github.com/tom6m6/tom6m6.github.io.git</a><br>而且选项冒号之后一定要有空格<br>完成这个操作之后<br>到github上那个仓库的设置部分里的github pages，把source改为master而不是 main<br>安装部署插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>测试上述过程git bash中输入<br>hexo clean &amp; hexo g &amp; hexo d</p>
<h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><p>说实话，内置的landscape主题挺丑的，本博客采用next主题，感觉这个十分简洁<br>当然，你也可以在 <a href="https://hexo.io/themes/index.html">这里</a> 挑选自己喜欢的<br>以安装next为例<br>先下载 git clone <a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a> themes/next<br>然后在站点配置文件中找到theme 改为 theme: next<br>在主题配置中，各选项根据实际需求更改，只要删掉注释，然后为默认的加上#就行</p>
<h3 id="面子工程"><a href="#面子工程" class="headerlink" title="面子工程"></a>面子工程</h3><p>站点配置中author title timezon description这些根据实际情况改<br>language 写zh-Hans (别像我一样最开始写的是zh,然后一堆阿拉伯语)<br>timezone: Asis/Shanghai</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="hexo基本语法"><a href="#hexo基本语法" class="headerlink" title="hexo基本语法"></a>hexo基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g 安装</span><br><span class="line">npm update hexo -g 升级</span><br><span class="line">hexo init 初始化</span><br><span class="line">hexo n &quot;123456&quot; 新建标题为123456的文章</span><br><span class="line">hexo g 生成（generate）</span><br><span class="line">hexo s 预览模式（本地）</span><br><span class="line">hexo d 部署到服务器 (deploy)</span><br><span class="line">hexo server 监视文件变动并自动更新</span><br><span class="line">hexo server -s 静态模式</span><br><span class="line">hexo server -p 6666 设置端口</span><br><span class="line">hexo server -i 192.168.1.1 更改ip</span><br><span class="line">hexo clean 清除缓存</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="next一些配置"><a href="#next一些配置" class="headerlink" title="next一些配置"></a>next一些配置</h3><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p>nexT 有 4种 scheme，分别为 Muse、Mist、Pisces、Gemini<br>个人最喜欢Gemini<br>然后darmode暗夜模式开启<br>sidebar position里面该侧边栏<br>avatar后面的url跟一个图片网址就可以作为自己的头像啦<br>menu菜单包括的东西 比如归档 标签<br>excerpt_description: true 设置首页不显示全文</p>
<h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><p>低级的是在yourblogsite/themes/next/layout/custom/head.swig 文件中<br>在<head></head>之间添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">            if (prompt(&#x27;请输入密码&#x27;) !== &#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">                alert(&#x27;密码错误&#x27;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>之后，在你想要加密的文章的头文件里添加上password: yourpassword即可。<br>可能被破解。如果你的博客源码是存放在GitHub这样的开源库的话，那么恭喜你。别有用心之人可以通过查看你的GitHub仓库对应文章的md文件找到这个密码。<br>稍稍高级一些的<br>npm install –save hexo-blog-encrypt 安装加密软件<br>然后到站点配置，加入如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">	enable: true</span><br></pre></td></tr></table></figure>
<p>然后在你的文章的头部添加上对应的字段，如 password, abstract, message<br>password: 是该博客加密使用的密码<br>abstract: 是该博客的摘要，会显示在博客的列表页<br>message: 这个是博客查看时，密码输入框上面的描述性文字</p>
<h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><p>开启localsearch<br>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后站点配置下，加入如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<h4 id="隐藏强力驱动"><a href="#隐藏强力驱动" class="headerlink" title="隐藏强力驱动"></a>隐藏强力驱动</h4><p>隐藏网页底部 powered By Hexo<br>打开 themes/next/layout/_partials/footer.swig 找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">    &#123;%- set next_site = &#x27;https://theme-next.js.org&#x27; if theme.scheme === &#x27;Gemini&#x27; else &#x27;https://theme-next.js.org/&#x27; + theme.scheme | lower + &#x27;/&#x27; %&#125;</span><br><span class="line">    &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme)) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>把这段代码首尾分别加上：<!-- 和-->，或者直接删除。</p>
<h3 id="域名及个人主页"><a href="#域名及个人主页" class="headerlink" title="域名及个人主页"></a>域名及个人主页</h3><p>好像可以直接发布到自己的服务器<br>如果自己有服务器的话，也可以不使用 GitHub Pages，直接部署的自己的服务器上，通过 Nginx 进行代理，我这里有一个阿里云上的 CentOS 7 版的 Linux 服务器，演示下如何部署，步骤如下。</p>
<p>打开 hexo-blog 根目录下的 _config.yml，增加如下配置，这是因为把网站存放在了子目录中，要和 Nginx 配置中的 location /blog 路径一致。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root: /blog</span><br></pre></td></tr></table></figure>
<p>hexo-blog 根目录下执行打包命令，打包好的文件在 public 目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>将public 目录下的文件复制到 Linux 服务器上的某个目录下，我的存放目录为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/rkyao/fronted/hexo-blog</span><br></pre></td></tr></table></figure>
<p>修改 Nginx 配置文件，我的 Nginx 安装路径为 /usr/local，大家根据自己实际情况调整</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br><span class="line">vim nginx.conf</span><br><span class="line">location /blog&#123;</span><br><span class="line">	alias	/opt/rkyao/fronted/hexo-blog;</span><br><span class="line">	index	index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>
<p>访问博客 <a href="http://47.96.106.173/blog">http://47.96.106.173/blog</a><br>以上内容来源于他人</p>
<h3 id="bash-hexo-command-not-found"><a href="#bash-hexo-command-not-found" class="headerlink" title="bash: hexo: command not found"></a>bash: hexo: command not found</h3><p>出现了版本信息就证明 nodejs 和 npm 是没有问题的，那么就应该是环境变量的配置问题了，在【此电脑】右键【属性】，依次选择【高级系统设置】-【环境变量】，选择系统变量 Path，将 node_modules 下的 .bin 文件路径添加到 Path 里面</p>
<p>注意你的博客目录下应该有两个 node_modules 文件夹，例如我的是 E:\BLOG\<a href="http://www.itrhx.com/node_modules/.bin">www.itrhx.com\node_modules\.bin</a> 和 E:\BLOG\<a href="http://www.itrhx.com/Hexo/node_modules/.bin">www.itrhx.com\Hexo\node_modules\.bin</a></p>
<p>要添加到 Path 里面的是与 _config.yml 在同一个目录的 node_modules 文件夹！</p>
]]></content>
      <tags>
        <tag>skills</tag>
      </tags>
  </entry>
</search>
